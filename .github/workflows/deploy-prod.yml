name: Deploy to Production

on:
  push:
    branches:
      - main  # hoặc branch production của bạn
  workflow_dispatch:  # cho phép kích hoạt thủ công

env:
  DOCKER_IMAGE: rezentry-app
  DOCKER_CONTAINER: rezentry-prod
  DOCKER_CONTAINER_TEMP: rezentry-prod-temp

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Deploy to VPS
        uses: and-fm/cloudflared-ssh-action@v3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          private_key_filename: ${{ secrets.SSH_PRIVATE_KEY_FILENAME }}
          private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
          port: ${{ secrets.SSH_PORT }}
          service_token_id: ${{ secrets.SERVICE_TOKEN_ID }}
          service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
          commands: |
            # Deploy script
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Check if temp container exists and remove it
            if [ "$(docker ps -aq -f name=${{ env.DOCKER_CONTAINER_TEMP }})" ]; then
              docker rm -f ${{ env.DOCKER_CONTAINER_TEMP }}
            fi

            # Start new container on a different port
            docker run -d \
              --name ${{ env.DOCKER_CONTAINER_TEMP }} \
              -p 3001:80 \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Wait for the new container to be healthy
            sleep 10

            # Check if the new container is running
            if [ "$(docker ps -q -f name=${{ env.DOCKER_CONTAINER_TEMP }})" ]; then
              # Stop and remove the old container
              if [ "$(docker ps -aq -f name=${{ env.DOCKER_CONTAINER }})" ]; then
                docker rm -f ${{ env.DOCKER_CONTAINER }}
              fi

              # Rename the temp container to the production name
              docker rename ${{ env.DOCKER_CONTAINER_TEMP }} ${{ env.DOCKER_CONTAINER }}

              # Update nginx reverse proxy or load balancer configuration
              # This assumes you have nginx set up as a reverse proxy
              echo "
              upstream rezentry_backend {
                server localhost:3000;
              }

              server {
                listen 80;
                server_name your-domain.com;

                location / {
                  proxy_pass http://rezentry_backend;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }" | sudo tee /etc/nginx/sites-available/rezentry

              # Reload nginx configuration
              sudo nginx -t && sudo systemctl reload nginx

              echo "Deployment successful!"
            else
              echo "New container failed to start. Rolling back..."
              docker rm -f ${{ env.DOCKER_CONTAINER_TEMP }}
              exit 1
            fi
